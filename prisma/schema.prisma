// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  ADMIN_USER
  BASIC_USER
  SUPER_ADMIN_USER
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  username   String   @unique
  password   String
  picture    String
  role       Role     @default(BASIC_USER)
  createdAt  DateTime @default(now())
  quizzes    Quiz[]
  Rating     Rating[]
  Score      Score[]
}

model Rating {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  rating Int
  Quiz   Quiz? @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId Int?
}

model Score {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  quiz   Quiz? @relation(fields: [quizID], references: [id], onDelete: Cascade)
  quizID Int?
  score  Int
}

model Category {
  id      Int    @id @default(autoincrement())
  name    String
  quizzes Quiz[]
}

enum Type {
  multiple
  boolean
}

enum Difficulty {
  easy
  medium
  hard
}

model Quiz {
  id         Int         @id @default(autoincrement())
  name       String
  category   Category    @relation(fields: [categoryid], references: [id], onDelete: Cascade)
  categoryid Int
  type       Type        @default(multiple)
  difficulty Difficulty  @default(medium)
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?
  scores     Score[]
  average    Decimal?    @db.Decimal(10, 2)
  rating     Rating[]
  questions  Questions[]
  start_date DateTime    @default(now()) @db.Date
  end_date   DateTime    @default(now()) @db.Date
}

model Questions {
  id        Int   @id @default(autoincrement())
  quiz      Quiz  @relation(fields: [quizid], references: [id], onDelete: Cascade)
  quizid    Int
  questions Json?
}

model Token {
  id      Int @id @default(autoincrement())
  token   String    @unique
  createdAt  DateTime @default(now())
}
